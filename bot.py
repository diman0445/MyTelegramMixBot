import logging
from datetime import datetime, timezone
import pytz # <-- –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ pytz
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)
import uuid # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å uuid –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID

# --- –î–û–ë–ê–í–õ–ï–ù–´ –ò–ú–ü–û–†–¢–´ –î–õ–Ø FLASK –ò THREADING ---
from flask import Flask
from threading import Thread
# --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–´–• –ò–ú–ü–û–†–¢–û–í ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    # filename='bot.log' # –≠—Ç—É —Å—Ç—Ä–æ–∫—É –ª—É—á—à–µ –£–ë–†–ê–¢–¨ –¥–ª—è Replit, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "8191425731:AAHBmgRcOMVTPXzm5_hlATni7pKsLOqCyyM"  # –í–ê–® –¢–û–ö–ï–ù –ë–û–¢–ê!
# ID —á–∞—Ç–æ–≤
GROUP_CHAT_ID = -1002816139814  # –û–±—â–∏–π —Ä–∞–±–æ—á–∏–π —á–∞—Ç
ADMIN_IDS = [289350415, 5920291113]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_USERNAMES = ["@dmi9630", "@MaximZabara"]  # –î–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π

# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
EMPLOYEES = ["–ò–ª—å—è", "–ò–≥–æ—Ä—å", "–í–∞–ª–µ—Ä–∏–π", "–î—Ä—É–≥–æ–π"]

# –õ–∏–º–∏—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_INGREDIENTS = 20  # –ú–∞–∫—Å. –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –∑–∞–º–µ—Å–µ
MAX_PHOTOS_PER_INGREDIENT = 5  # –ú–∞–∫—Å. —Ñ–æ—Ç–æ –Ω–∞ 1 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
REJECT_REASONS = ["–ü—Ä–æ—Å—Ä–æ—á–∫–∞", "–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ", "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ—Ü–µ–ø—Ç—É—Ä–µ", "–î—Ä—É–≥–æ–µ"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –∑–∞–º–µ—Å
(
    AWAIT_RESPONSIBLE,
    AWAIT_PRODUCT_NAME,
    AWAIT_RECIPE,
    AWAIT_INGREDIENT,
    CONFIRMATION
) = range(5)

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
(
    AWAIT_CUSTOM_REJECTION_REASON # –û–∂–∏–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
) = range(5, 6) # –ù–∞—á–∏–Ω–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å 5, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏

current_mix = {}

def msk_time():
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pytz –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ "Europe/Moscow"
    return datetime.now(timezone.utc).astimezone(pytz.timezone('Europe/Moscow')).strftime("%d.%m.%Y %H:%M")

def get_employees_keyboard():
    return ReplyKeyboardMarkup(
        [[name] for name in EMPLOYEES],
        one_time_keyboard=True,
        resize_keyboard=True
    )

def get_ingredient_keyboard():
    return ReplyKeyboardMarkup(
        [["–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "–°–ª–µ–¥—É—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"], ["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]],
        one_time_keyboard=True,
        resize_keyboard=True
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
# –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç mix_id –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ callback_data
def get_approval_keyboard(mix_id: str):
    buttons = [[InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{mix_id}")]]
    # –î–æ–±–∞–≤–ª—è–µ–º "–°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞" –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
    buttons.extend([[InlineKeyboardButton(reason, callback_data=f"reject_{i}_{mix_id}")] for i, reason in enumerate(REJECT_REASONS)])
    buttons.append([InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞", callback_data=f"reject_custom_{mix_id}")])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_mix.clear()
    await update.message.reply_text(
        "üè≠ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–º–µ—Å\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=get_employees_keyboard()
    )
    return AWAIT_RESPONSIBLE

async def handle_responsible(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text not in EMPLOYEES:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!",
            reply_markup=get_employees_keyboard()
        )
        return AWAIT_RESPONSIBLE

    current_mix.update({
        'responsible': update.message.text,
        'creator_id': update.effective_user.id,
        'timestamp': msk_time()
    })

    await update.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:"
    )
    return AWAIT_PRODUCT_NAME

async def handle_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.strip():
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return AWAIT_PRODUCT_NAME

    current_mix['product_name'] = update.message.text

    await update.message.reply_text(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º!",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
    )
    return AWAIT_RECIPE

async def handle_recipe_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_mix['recipe_photo'] = update.message.photo[-1].file_id

    current_mix['current_ingredient'] = {
        'number': 1,
        'photos': []
    }

    await update.message.reply_text(
        f"üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏. –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞\n‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n‚Ä¢ –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏\n‚Ä¢ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏\n\n"
        f"–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ {MAX_PHOTOS_PER_INGREDIENT} —Ñ–æ—Ç–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞!",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
    )
    return AWAIT_INGREDIENT

async def handle_ingredient_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ing = current_mix['current_ingredient']
    if len(ing['photos']) >= MAX_PHOTOS_PER_INGREDIENT:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS_PER_INGREDIENT} —Ñ–æ—Ç–æ –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç!",
            reply_markup=get_ingredient_keyboard()
        )
        return AWAIT_INGREDIENT

    ing['photos'].append(update.message.photo[-1].file_id)

    await update.message.reply_text(
        f"‚úÖ –§–æ—Ç–æ {len(ing['photos'])} –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ {ing['number']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=get_ingredient_keyboard()
    )
    return AWAIT_INGREDIENT

async def handle_ingredient_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text
    ing = current_mix['current_ingredient']

    if action == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel(update, context)
        return ConversationHandler.END

    if action == "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        if len(ing['photos']) >= MAX_PHOTOS_PER_INGREDIENT:
            await update.message.reply_text(
                f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ ({MAX_PHOTOS_PER_INGREDIENT}) –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞!",
                reply_markup=get_ingredient_keyboard()
            )
            return AWAIT_INGREDIENT

        await update.message.reply_text(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ {ing['number']}",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )
        return AWAIT_INGREDIENT

    elif action == "–°–ª–µ–¥—É—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç":
        if 'ingredients' not in current_mix:
            current_mix['ingredients'] = []

        current_mix['ingredients'].append(ing)

        if len(current_mix['ingredients']) >= MAX_INGREDIENTS:
            await update.message.reply_text("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤!")
            return await finish_ingredients(update, context)

        next_num = ing['number'] + 1
        current_mix['current_ingredient'] = {
            'number': next_num,
            'photos': []
        }

        await update.message.reply_text(
            f"üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç {next_num}\n"
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )
        return AWAIT_INGREDIENT

    elif action == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        if 'ingredients' not in current_mix:
            current_mix['ingredients'] = []

        current_mix['ingredients'].append(ing)
        return await finish_ingredients(update, context)

async def finish_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = len(current_mix['ingredients'])
    photos = sum(len(i['photos']) for i in current_mix['ingredients'])

    await update.message.reply_text(
        f"üìã –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞\n"
        f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç: {current_mix['product_name']}\n"
        f"‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {current_mix['responsible']}\n"
        f"‚Ä¢ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {total}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {photos}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {current_mix['timestamp']}\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É?",
        reply_markup=ReplyKeyboardMarkup(
            [["–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", "–û—Ç–º–µ–Ω–∏—Ç—å"]],
            resize_keyboard=True
        )
    )
    return CONFIRMATION

async def send_for_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–º–µ—Å–∞
    mix_id = str(uuid.uuid4())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Å–∞ –≤ bot_data –ø–æ —ç—Ç–æ–º—É ID
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 'pending_mixes' –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'pending_mixes' not in context.bot_data:
        context.bot_data['pending_mixes'] = {}
    context.bot_data['pending_mixes'][mix_id] = current_mix.copy()

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üîî –ù–æ–≤—ã–π –∑–∞–º–µ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                     f"–ü—Ä–æ–¥—É–∫—Ç: {current_mix['product_name']}\n"
                     f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {current_mix['responsible']}\n"
                     f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(current_mix['ingredients'])}\n"
                     f"–í—Ä–µ–º—è: {current_mix['timestamp']}",
                reply_markup=get_approval_keyboard(mix_id) # –ü–µ—Ä–µ–¥–∞–µ–º mix_id –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            await context.bot.send_photo(
                chat_id=admin_id,
                photo=current_mix['recipe_photo'],
                caption="üìã –†–µ—Ü–µ–ø—Ç—É—Ä–∞"
            )
            for ing in current_mix['ingredients']:
                for i, photo in enumerate(ing['photos'], 1):
                    await context.bot.send_photo(
                        chat_id=admin_id,
                        photo=photo,
                        caption=f"üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç {ing['number']} (—Ñ–æ—Ç–æ {i})"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await update.message.reply_text(
        f"‚úÖ –í–∞—à –∑–∞–º–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {', '.join(ADMIN_USERNAMES)}",
    )
    current_mix.clear()
    return ConversationHandler.END

async def handle_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º mix_id –∏–∑ callback_data
    callback_parts = query.data.split('_')
    action_type = callback_parts[0] # "approve" –∏–ª–∏ "reject"
    mix_id = callback_parts[-1] # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ mix_id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Å–∞ –∏–∑ bot_data
    mix_data = context.bot_data.get('pending_mixes', {}).get(mix_id, None)

    if not mix_data:
        logger.warning(f"–î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Å–∞ —Å ID {mix_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        return

    admin_name = query.from_user.first_name
    creator_id = mix_data.get('creator_id')

    if action_type == "approve":
        # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Å –∏–∑ pending_mixes –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.bot_data['pending_mixes'].pop(mix_id, None)

        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"üü¢ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω –∑–∞–º–µ—Å\n"
                     f"–ü—Ä–æ–¥—É–∫—Ç: {mix_data.get('product_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {mix_data.get('responsible', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(mix_data.get('ingredients', []))}\n"
                     f"–í—Ä–µ–º—è: {mix_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {admin_name}",
            )
            await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=mix_data.get('recipe_photo'),
                caption="üìã –†–µ—Ü–µ–ø—Ç—É—Ä–∞"
            )
            for ing in mix_data.get('ingredients', []):
                for i, photo in enumerate(ing['photos'], 1):
                    await context.bot.send_photo(
                        chat_id=GROUP_CHAT_ID,
                        photo=photo,
                        caption=f"üßÇ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç {ing['number']} (—Ñ–æ—Ç–æ {i})"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: {e}")

        if creator_id:
            try:
                await context.bot.send_message(
                    chat_id=creator_id,
                    text=f"‚úÖ –í–∞—à –∑–∞–º–µ—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                         f"–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {admin_name}\n\n"
                         f"–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–µ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é {creator_id} –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
        else:
            logger.warning("creator_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ mix_data –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ (–ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ bot_data).")

        await query.edit_message_text(f"‚úÖ –ó–∞–º–µ—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω ({admin_name})")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞—á–∞—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã
        return ConversationHandler.END # –í–∞–∂–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞

    elif action_type == "reject":
        reason_detail = ""
        if callback_parts[1] == "custom":
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª "–°–≤–æ—è –ø—Ä–∏—á–∏–Ω–∞"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mix_id –∏ chat_id –∞–¥–º–∏–Ω–∞ –≤ user_data, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É
            context.user_data['pending_custom_rejection'] = {
                'mix_id': mix_id,
                'admin_chat_id': query.message.chat_id,
                'message_to_edit_id': query.message.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
            return AWAIT_CUSTOM_REJECTION_REASON # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        else:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –ø—Ä–∏—á–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞
            reason_idx = int(callback_parts[1])
            reason_detail = REJECT_REASONS[reason_idx]
            await _send_rejection_notification(mix_id, reason_detail, admin_name, query, context)
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥)
async def _send_rejection_notification(mix_id, reason_detail, admin_name, query_obj, context):
    mix_data = context.bot_data.get('pending_mixes', {}).pop(mix_id, None) # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Å –∏–∑ pending_mixes
    if not mix_data:
        logger.warning(f"–î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Å–∞ —Å ID {mix_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")
        await query_obj.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        return

    creator_id = mix_data.get('creator_id')

    if creator_id:
        try:
            # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            await context.bot.send_message(
                chat_id=creator_id,
                text=f"‚ùå –í–∞—à –∑–∞–º–µ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
                     f"–ü—Ä–∏—á–∏–Ω–∞: **{reason_detail}**\n" # –ü—Ä–∏—á–∏–Ω–∞ –∂–∏—Ä–Ω—ã–º
                     f"–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {admin_name}\n\n"
                     f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–µ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
                parse_mode='Markdown' # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é {creator_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
    else:
        logger.warning("creator_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ mix_data –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ (–ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ bot_data –≤ _send_rejection_notification).")

    await query_obj.edit_message_text(f"‚ùå –ó–∞–º–µ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {reason_detail} ({admin_name})")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_custom_rejection_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    custom_reason = update.message.text.strip()
    if not custom_reason:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return AWAIT_CUSTOM_REJECTION_REASON # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Ç–µ–∫—Å—Ç

    pending_data = context.user_data.get('pending_custom_rejection')
    if not pending_data:
        logger.error(f"pending_custom_rejection –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ {update.effective_user.id}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel.")
        return ConversationHandler.END

    mix_id = pending_data['mix_id']
    admin_name = update.effective_user.first_name
    admin_chat_id = pending_data['admin_chat_id']
    message_to_edit_id = pending_data['message_to_edit_id']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    await _send_rejection_notification(mix_id, custom_reason, admin_name, 
                                       type('obj', (object,), {'edit_message_text': lambda text: context.bot.edit_message_text(chat_id=admin_chat_id, message_id=message_to_edit_id, text=text, parse_mode='Markdown')})(), # –≠–º—É–ª–∏—Ä—É–µ–º query_obj –¥–ª—è edit_message_text
                                       context)

    del context.user_data['pending_custom_rejection'] # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# --- –í–∞–∂–Ω–æ: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ cancel –ü–ï–†–ï–î main() ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ –≤–≤–æ–¥—É –ø—Ä–∏—á–∏–Ω—ã
    if 'pending_custom_rejection' in context.user_data and update.effective_user.id == context.user_data['pending_custom_rejection']['admin_chat_id']:
        del context.user_data['pending_custom_rejection']
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã. –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    else:
        current_mix.clear()
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–º–µ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove() # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    return ConversationHandler.END

# --- –ù–û–í–´–ô –ë–õ–û–ö: FLASK-–°–ï–†–í–ï–† –î–õ–Ø –ü–û–î–î–ï–†–ñ–ê–ù–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò ---
flask_app = Flask('') # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

@flask_app.route('/')
def keep_alive():
    return "Bot is alive!" # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã UptimeRobot –∑–Ω–∞–ª, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç

def run_flask_app_in_thread():
    # Replit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 8080 –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞. host='0.0.0.0' –¥–µ–ª–∞–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑–≤–Ω–µ.
    flask_app.run(host='0.0.0.0', port=8080)
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

def main():
    # --- –ù–û–í–û–ï: –ó–ê–ü–£–°–ö FLASK-–°–ï–†–í–ï–†–ê –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï ---
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
    flask_thread = Thread(target=run_flask_app_in_thread)
    flask_thread.start()
    logger.info("Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

    app = ApplicationBuilder().token(TOKEN).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bot_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è pending_mixes
    app.bot_data['pending_mixes'] = {}

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AWAIT_RESPONSIBLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_responsible)],
            AWAIT_PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_name)],
            AWAIT_RECIPE: [
                MessageHandler(filters.PHOTO, handle_recipe_photo),
                MessageHandler(filters.Text("–û—Ç–º–µ–Ω–∏—Ç—å"), cancel)
            ],
            AWAIT_INGREDIENT: [
                MessageHandler(filters.PHOTO, handle_ingredient_photo),
                MessageHandler(filters.Text(["–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "–°–ª–µ–¥—É—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]), handle_ingredient_action)
            ],
            CONFIRMATION: [
                MessageHandler(filters.Text("–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"), send_for_approval),
                MessageHandler(filters.Text("–û—Ç–º–µ–Ω–∏—Ç—å"), cancel)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–π ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_approval, pattern="^(approve|reject_\\d+|reject_custom)_([0-9a-fA-F-]+)$")],
        states={
            AWAIT_CUSTOM_REJECTION_REASON: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_rejection_reason),
                CommandHandler('cancel', cancel) # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(admin_conv_handler) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏") # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª–∏ Replit
    app.run_polling()

if __name__ == '__main__':
    main()